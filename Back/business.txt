# Assumptions y Decisiones de Dise√±o - FS.FakeTwitter (Challenge Ual√°)

## ‚úÖ Supuestos del Desaf√≠o

1. Todos los usuarios se consideran v√°lidos.
   - No se implementa un sistema de login o autenticaci√≥n.
   - Los identificadores de usuario se env√≠an como parte del body o ruta.

2. No se gestiona sesi√≥n de usuario.
   - No se requiere almacenamiento de tokens o JWT en esta versi√≥n.

3. Los tweets tienen un l√≠mite de 280 caracteres (similar a Twitter).

4. Se asumi√≥ que el sistema debe ser escalable y optimizado para lecturas.

---

## üèóÔ∏è Decisiones T√©cnicas

1. **Lenguaje y Framework**
   - Lenguaje: C#
   - Framework: .NET 8
   - Patr√≥n de arquitectura: Onion Architecture + CQRS con MediatR

2. **Persistencia**
   - Se utiliz√≥ una base de datos en memoria (`EF Core InMemory`) para simplificar el desarrollo.
   - Para producci√≥n se optar√≠a por SQL Server o PostgreSQL con proyecci√≥n a Redis para lectura.

3. **Testing**
   - Se implementaron tests unitarios y de integraci√≥n.
   - Se logr√≥ 100% de cobertura de c√≥digo.
   - Se integr√≥ `coverlet` + `reportgenerator` para analizar coverage.

4. **Documentaci√≥n**
   - Swagger se configur√≥ para documentar los endpoints autom√°ticamente.
   - El XML del proyecto se incluye para que Swagger pueda acceder a los comentarios del c√≥digo.

5. **Manejo de errores**
   - Se centraliz√≥ mediante middleware de excepciones personalizadas.
   - Tipos: `NotFoundException`, `ValidationException`, `UnauthorizedException`.

6. **Extensibilidad**
   - Todo el dise√±o permite agregar f√°cilmente m√≥dulos como:
     - Autenticaci√≥n con API Key o JWT
     - Registro de usuarios
     - Persistencia real
     - Cache de timeline

---

## ‚ú® Posibles mejoras futuras

- Implementaci√≥n de sistema de usuarios.
- Autenticaci√≥n (JWT + Roles).
- Base de datos relacional y caching.
- Timeline paginado.
- Websockets para timeline en tiempo real.
- Dockerizaci√≥n y despliegue continuo (CI/CD).
